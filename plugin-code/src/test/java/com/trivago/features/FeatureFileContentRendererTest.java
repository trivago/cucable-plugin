package com.trivago.features;

import com.trivago.vo.DataTable;
import com.trivago.vo.SingleScenario;
import com.trivago.vo.Step;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;

public class FeatureFileContentRendererTest {

    private FeatureFileContentRenderer featureFileContentRenderer;

    @Before
    public void setup() {
        featureFileContentRenderer = new FeatureFileContentRenderer();
    }

    @Test
    public void getRenderedFeatureFileContentTest() {
        String expectedOutput = "@featureTag1\n" +
                "@featureTag2\n" +
                "Feature: featureName\n" +
                "featureDescription\n" +
                "\n" +
                "Background:\n" +
                "    Background Step 1\n" +
                "    Background Step 2\n" +
                "\n" +
                "@scenarioTag1\n" +
                "@scenarioTag2\n" +
                "Scenario: scenarioName\n" +
                "scenarioDescription\n" +
                "    Step 1\n" +
                "    Step 2\n" +
                "\n# Source feature: TESTPATH\n" +
                "# Generated by Cucable null\n";

        String featureName = "Feature: featureName";
        String featureDescription = "featureDescription";
        String featureLanguage = "";
        List<String> featureTags = Arrays.asList("@featureTag1", "@featureTag2");
        String scenarioName = "Scenario: scenarioName";
        int lineNumber = 1;
        String scenarioDescription = "scenarioDescription";
        List<Step> backgroundSteps = Arrays.asList(
                new Step("Background Step 1", null, null),
                new Step("Background Step 2", null, null)
        );

        List<Step> steps = Arrays.asList(
                new Step("Step 1", null, null),
                new Step("Step 2", null, null)
        );
        List<String> scenarioTags = Arrays.asList("@scenarioTag1", "@scenarioTag2");

        String featureFilePath = "TESTPATH";
        SingleScenario singleScenario =
                new SingleScenario(featureName, featureFilePath, featureLanguage, featureDescription, scenarioName,
                        lineNumber, scenarioDescription, featureTags, backgroundSteps
                );
        singleScenario.setScenarioTags(scenarioTags);
        singleScenario.setSteps(steps);

        String renderedFeatureFileContent = featureFileContentRenderer.getRenderedFeatureFileContent(singleScenario);

        // In a windows system, replace line separator "\r\n" with "\n".
        renderedFeatureFileContent = renderedFeatureFileContent.replaceAll("\\r\\n", "\n");

        assertThat(renderedFeatureFileContent, is(expectedOutput));
    }

    @Test
    public void getRenderedFeatureFileContentNonEnglishTest() {
        String expectedOutput = "# language: de\n\n" +
                "@featureTag1\n" +
                "@featureTag2\n" +
                "Feature: featureName\n" +
                "featureDescription\n" +
                "\n" +
                "Background:\n" +
                "    Background Step 1\n" +
                "    Background Step 2\n" +
                "\n" +
                "@scenarioTag1\n" +
                "@scenarioTag2\n" +
                "Scenario: scenarioName\n" +
                "scenarioDescription\n" +
                "    Step 1\n" +
                "    Step 2\n" +
                "\n# Source feature: TESTPATH\n" +
                "# Generated by Cucable null\n";

        String featureName = "Feature: featureName";
        String featureDescription = "featureDescription";
        String featureLanguage = "de";
        List<String> featureTags = Arrays.asList("@featureTag1", "@featureTag2");
        String scenarioName = "Scenario: scenarioName";
        int lineNumber = 1;
        String scenarioDescription = "scenarioDescription";
        List<Step> backgroundSteps = Arrays.asList(
                new Step("Background Step 1", null, null),
                new Step("Background Step 2", null, null)
        );
        List<Step> steps = Arrays.asList(
                new Step("Step 1", null, null),
                new Step("Step 2", null, null)
        );
        List<String> scenarioTags = Arrays.asList("@scenarioTag1", "@scenarioTag2");

        String featureFilePath = "TESTPATH";
        SingleScenario singleScenario =
                new SingleScenario(featureName, featureFilePath, featureLanguage, featureDescription, scenarioName,
                        lineNumber, scenarioDescription, featureTags, backgroundSteps
                );
        singleScenario.setScenarioTags(scenarioTags);
        singleScenario.setSteps(steps);

        String renderedFeatureFileContent = featureFileContentRenderer.getRenderedFeatureFileContent(singleScenario);

        // In a windows system, replace line separator "\r\n" with "\n".
        renderedFeatureFileContent = renderedFeatureFileContent.replaceAll("\\r\\n", "\n");

        assertThat(renderedFeatureFileContent, is(expectedOutput));
    }

    @Test
    public void formatDataTableStringTest() {
        String expectedOutput = "Feature: featureName\n" +
                "featureDescription\n" +
                "\n" +
                "Scenario: scenarioName\n" +
                "scenarioDescription\n" +
                "    Step 1\n" +
                "      | cell11 | cell12 | cell13 |\n" +
                "      | cell21 | cell22 | cell23 |\n" +
                "\n# Source feature: TESTPATH\n" +
                "# Generated by Cucable null\n";

        String featureName = "Feature: featureName";
        String featureLanguage = "";
        String featureDescription = "featureDescription";
        String scenarioName = "Scenario: scenarioName";
        int lineNumber = 1;
        String scenarioDescription = "scenarioDescription";

        DataTable dataTable = new DataTable();
        dataTable.addRow(Arrays.asList("cell11", "cell12", "cell13"));
        dataTable.addRow(Arrays.asList("cell21", "cell22", "cell23"));

        List<Step> steps = Collections.singletonList(new Step("Step 1", dataTable, null));

        String featureFilePath = "TESTPATH";
        SingleScenario singleScenario =
                new SingleScenario(featureName, featureFilePath, featureLanguage, featureDescription, scenarioName,
                        lineNumber, scenarioDescription, new ArrayList<>(), new ArrayList<>()
                );
        singleScenario.setSteps(steps);

        String renderedFeatureFileContent = featureFileContentRenderer.getRenderedFeatureFileContent(singleScenario);

        // In a windows system, replace line separator "\r\n" with "\n".
        renderedFeatureFileContent = renderedFeatureFileContent.replaceAll("\\r\\n", "\n");

        assertThat(renderedFeatureFileContent, is(expectedOutput));
    }

    @Test
    public void formatDocStringTest() {
        String expectedOutput = "Feature: featureName\n" +
                "\n" +
                "Scenario: scenarioName\n" +
                "    Step 1\n" +
                "\"\"\"\n" +
                "DOCSTRING LINE 1\n" +
                "DOCSTRING LINE 2\n" +
                "\"\"\"\n" +
                "\n# Source feature: TESTPATH\n" +
                "# Generated by Cucable null\n";

        String featureName = "Feature: featureName";
        String scenarioName = "Scenario: scenarioName";

        List<Step> steps = Collections.singletonList(new Step("Step 1", null, "DOCSTRING LINE 1\nDOCSTRING LINE 2"));

        String featureFilePath = "TESTPATH";
        SingleScenario singleScenario =
                new SingleScenario(featureName, featureFilePath, null, null, scenarioName, 0,
                        null, new ArrayList<>(), new ArrayList<>()
                );
        singleScenario.setSteps(steps);

        String renderedFeatureFileContent = featureFileContentRenderer.getRenderedFeatureFileContent(singleScenario);

        // In a windows system, replace line separator "\r\n" with "\n".
        renderedFeatureFileContent = renderedFeatureFileContent.replaceAll("\\r\\n", "\n");

        assertThat(renderedFeatureFileContent, is(expectedOutput));
    }

    @Test
    public void getRenderedFeatureFileContentReplaceBackslashesInCommentsTest() {
        String expectedOutput = "# language: de\n\n" +
                "@featureTag1\n" +
                "@featureTag2\n" +
                "Feature: featureName\n" +
                "featureDescription\n" +
                "\n" +
                "@scenarioTag1\n" +
                "@scenarioTag2\n" +
                "Scenario: scenarioName\n" +
                "scenarioDescription\n" +
                "    Step 1\n" +
                "    Step 2\n" +
                "\n# Source feature: c:/unknown/path\n" +
                "# Generated by Cucable null\n";

        String featureName = "Feature: featureName";
        String featureDescription = "featureDescription";
        String featureLanguage = "de";
        List<String> featureTags = Arrays.asList("@featureTag1", "@featureTag2");
        String scenarioName = "Scenario: scenarioName";
        int lineNumber = 1;
        String scenarioDescription = "scenarioDescription";
        List<Step> steps = Arrays.asList(
                new Step("Step 1", null, null),
                new Step("Step 2", null, null)
        );
        List<String> scenarioTags = Arrays.asList("@scenarioTag1", "@scenarioTag2");

        String featureFilePath = "c:\\unknown\\path";
        SingleScenario singleScenario =
                new SingleScenario(featureName, featureFilePath, featureLanguage, featureDescription, scenarioName,
                        lineNumber, scenarioDescription, featureTags, null
                );
        singleScenario.setScenarioTags(scenarioTags);
        singleScenario.setSteps(steps);

        String renderedFeatureFileContent = featureFileContentRenderer.getRenderedFeatureFileContent(singleScenario);

        // In a windows system, replace line separator "\r\n" with "\n".
        renderedFeatureFileContent = renderedFeatureFileContent.replaceAll("\\r\\n", "\n");

        assertThat(renderedFeatureFileContent, is(expectedOutput));
    }
}